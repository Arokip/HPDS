functional programming
stream --> result

map
filter
reduce (fold)


List<Integer> numbers = Arrays.asList(1, 2, 3, ...);
numbers.stream().filter(i -> i % 2 ==0);
- lambda expressions

numbers.stream().filter(i -> i % 2 ==0).collect(Collectors.toList()); // list contains only even numbers

lambdu lze rozložit na annonymní třídu


=====================================================



int[] lenght = new int[]{numberString.lenght()-1};
final int[] lenght = {numberString.lenght()-1}; // must be array

Array.strem(numberString.split(""))
					.map(s->new int[]{Integer.parseInt(s), lenght[0]--})
					.filter(t -> t[0] != 0)
					.collect(Collectors.toList())
					.toArray(new int[0][]);





scratch file .. pro zkoušení kódu


String s = "123";
iterate (s.length, l->l-1)			//stream.IntStream.iterate;
					.limit(s.length())
					.boxed()				// IntStream --> Stream<Integer>
					.map(i->newObject[]{number.substring(i, i+1), i})
					.foreach(i->sout(i));


int[][]::new to samé jako new int[][]
můžeme pak volat ve funkcionálních částech třeba .filter(this::isNotZero)



Refactoring technique: Replace Temp With Query

Více čitelný kód. Ale za cenu toho, že to bude trochu pomalejší, ale to nám nevadí.




Pak udělat i testy performance, jestli nám to doběhne třeba 1mil za sekundu..


=====================================================


Reflection
Ability of programming language to inspect code
wiki: "In computer science, reflection is the ability of a process to examine, introspect, and modify its own structure and behavior."


Class class_ = String.class;
class_.

Method method
Field field
Constructor
Annotation


Class<?> aClass
Class aClass = String.class;
aClass.isInstance(obj: "aaa"); --> true
aClass.isInstance(obj: 45612); --> false

Method[] methods = aClass.getDeclaredMethods();
foreahc(method) method.getName(), method.getParameterCount();

Annotations anns = method.getAnnotations();
foreach(anns) ann.annotationType().getName();

if (ann.annType().isAssignableFrom(org.junit.Test))
method.invoke(this);

method.invoke(new Test());  // throws exceptions




public interface BankAccont {
	void withdraw(double amount);
	Double money();
}

public class MyBankAccount implements BankAccont{ // normaly impementation of interface
	@Override withdraw()
}

InvocationHandler handler = InvocationHandler(){
	@Override
	public Object invoke(Object proxy, Method method, Object[] args){
		sout(method.getName()); --> write out name of called function
		return null;
	}
}

BankAccont bankAccont = (BankAccont)Proxy.newProxyInstance(
	BankAccont.class.getClassLoader(),
	new Class[] {new BankAccont.class},
	handler);

bankAccont.withdraw(100); // -->invoke method
bankAccont.money();




RomanNumerals --breakdown--> ((NumberBreaker)stub)

^--Test


class stub



public interface BankAccont {
	void withdraw(double amount);
	Double money();
}

InvocationHandler handler = InvocationHandler(){
	@Override
	public Object invoke(Object proxy, Method method, Object[] args){
		sout(method.getName()); --> write out name of called function
		return method.invoke(b, args);
	}
}

BankAccont bankAccont = (BankAccont)Proxy.newProxyInstance(
	BankAccont.class.getClassLoader(),
	new Class[] {new BankAccont.class},
	handler);

bankAccont.withdraw(100);
Double money = bankAccont.money();

              Proxy
      Stub----^   ^----Mock

https://martinfowler.com/articles/mocksArentStubs.html

stub - auditar - wrapper classy pro další testování (integration test)
mock - simular (behavior) - vytvořit mock, který se tak jenom navenek tváří (simuluje metodu/třídu)

Integracion test


Mockito (mockito.org) - maven library to stubs (it calls it mock)

List list = mock(List.class); // List is interface; IT IS a STUB!

list.clear();
list.add("one");

sout(list.size()); // it is mock --> return 0

verify(list).add("one"); // verify if list called method add with "one"
verify(list).clear;



//LinkedList mockedList = mock(LinkedList.clas);
List mockedList = mock(List.clas);

when(mockedList.get(0)).thenReturn("first"); // only for tests, we define what it should return
when(mockedList.size()).thenReturn(10);
sout(mockedList.get(0));
sout(mockedList.get(1));
sout(mockedList.size());


-----------------------------------------------------

Dependency injection - používání objektu aniž bych na ní měl referenci

((1)) create new
public class Switch{
	private final Lamp lamp;
	public Switch(){
		this.lamp = new Lamp();
	}
}

((2))
public class Switch{
	private final Lamp lamp;
	public Switch(Lamp lamp){
		this.lamp = lamp;
	}

	void turn(State state){
 		if else lamp.on/off();
	}

	void turn(){
		if (lamp.isOn())
		{
			lamp.off();
		} else {
			lamp.on();
		}
	}

	enum State{ON, OFF}
}

public interface Lamp{
	void on();
	void off();

	boolean isOn();
	boolean isOff();
}

@Test
xxx(){
	Lamp lamp = mock(Lamp.class);

	when(lamp.isOn()).thenreturn(false); // init lamp
	when(lamp.isOff()).thenreturn(true);

	Switch s = new Switch(lamp);
	//s.turn(ON);
	s.turn();

	verify(lamp).isOn();
	verify(lamp).on();
	verify(lamp, never()).off(); // never has been off
}


=====================================================


IFTTT - if this then that


PROJECT


architecture of our project:
									Account
									   |
									   ˇ
Sensor <---mock test--- Codition <--- Rule ---> Action ---stub test---> Actuator


una architectura para hacer sistema inteligente (se sensory a actuory) evironment for IS, Rule-based system

skupina 2-4 lidí

když kondición --> action
když je tolik hodin a nikdo není ve třídě (2 sensory) --> zhasni světla

automatizovat třeba dům, železnici, traffic, výtah-hodiny a počty lidí
když je baterie příliš vybitá, pošli mi sms
když mi přijde nějaký email (z banky), tak...
mobil - když jsem někdy podle gps, tak zpráva; když jiný sensor

test de integracion - udělat

máme si vybrat jaké sensory a aktuátory - je to zcela na nás

Prusa MK3


=====================================================


VCS MANUALES (version control)

RCS (apple) - revision control system

JCS centralizados (subversion, CVS, SCM oracle)

distributidos (GIT, Mercurio, Bazzar)


-----------------------------------------------------

GIT
no-linear development - branches

confirmado <--commit-- preparado <--add-- modificado
|                                            ^
-----------> pull/push ----------------------|


git flow

branches:
master - always works, production branch (continuous integration) - for client
hotfix - fast change that is needed - then merge to master and develop
release - preproduction, preparation for release for client
develop - working branch
feature(s) - plan for future releases, all should work here


=====================================================


Agile development

PMP (Project Management Professional) metología/certificacion para proyectos larga

-identificacion de personas
-historias de usuario
-backlog (priotizar las historias de usuario en funcion de valor y negocio)
-raod map (que historias de usuario van en que entrega y cuántas Entregas tenemos identificadas)

producto  /
plazo      |
precio    \


metologia INVEST

I	Independent	 The PBI should be self-contained, in a way that there is no inherent dependency on another PBI (Product Backlog Item).
N	Negotiable	 PBIs are not explicit contracts and should leave space for discussion.
V	Valuable	 A PBI must deliver value to the stakeholders.
E	Estimatable	 You must always be able to estimate the size of a PBI.
S	Small	     PBIs should not be so big as to become impossible to plan/task/prioritize within a level of accuracy.
T	Testable	 The PBI or its related description must provide the necessary information to make test development possible.



=====================================================



Sensor <I>  getValue() <---mock test--- Codition <--- (Account-->)Rule ---> Action ---stub test---> Actuator <I> - doAction()


Sensor - kamera, pak chování nějaké. Když je na kameře něco, když je tma, když je hodně hodin...

doAction()
- on/off
- go 5m
- go 30s


Account:
List<Sensor>
List<Rule>


=====================================================


Account
-ID
-name
-password


Sensor
+getValue()


Rule-->Condition-->Sensor



tarea de hoy:
entorno
5 cosas



3d tiskárna na dálku
-nastartovat tisk - model, parametry
-kdy se tisk spustí
-kdy je tisk dokončen
-online video tisku věcoii
-když se tisk nepodaří - uprostřed tisku se zkazí
-objekt nejde vytisknout - špatné parametry




senzory sekačky

výška trávy
naplnění koše
vzdálenost od objektů
málo baterie
když začne pršet

spojení s garáží - lokace garáže



senzory domu:
denní světlo
teplota v místnosti
teplota venku
vlhkost vzduchu



Intelligent greenhouse

senzory:
teplota vzduchu
denní světlo
vlhkost vzduchu
vlhkost půdy
živiny v půdě
výška rostliny
senzor částic ve vzduchu


aktuátory:
zalévání
zvlhčovač vzduchu
vyhřívání
umělé osvětlení
hnojení
notifikace - je vysoká


Account
-pěstované rostliny
-zalévání - jak často
-chtěná teplota
-chtěná vlhkost vzduchu
-maximální výška
-intenzita umělého dosvícení



=====================================================


GIT, GIT-FLOW

Maven

Annotation - tiene capacibilidad to modificar la funcionalidad, influir como funcciona (methodo)

archivo .properties
xml archivos
BC4J ORACLE


definir annotacion - @interface
  // @Twizzle is an annotation to method toggle().
  @Twizzle
  public void toggle() {
  }

  // Declares the annotation Twizzle.
  public @interface Twizzle {
  }


@Autowired
MyClass myObject; // ve Springu --> dependency injection nějaké knihovny


dependencia

Dependency injection


ClassA
ClassB
když chceme objA v objB, musíme najít způsob, jak dostat (injectar) objA do objB, abychom ho mohli použít


ClassB implements <I>
-ClassA objA
+ClassB()
+set ClassA(ClassA)

---v

<I> ClassA

^---

ClassA
+method ClassA()


UML class diagram
-If there is no diamond, then we have a simple association.
-If the diamond is left empty, it signifies it is an aggregation. This relation is stronger than a simple association. In this case a Customer aggregates Orders.
-If the diamond is black, this means it is a composition, which is even stronger than an aggregation because the aggregated class cannot be aggregated by other classes. Its "life" depends on the container.




=====================================================


*SUT - system under test
*Colaboradores

1)configurar
2)ejecutar
3)verificar
4)finalizar

// Arrange
// Act
// Assert



=====================================================


creacion dinamica de proxy (patron proxy)
nové vysvětlení reflection (proxy)

maven - command prompt --> ve složce s projektem

mvn clean

mvn validate
mvn compilar
mvn test
mvn package

java -jar C:\...\x.jar



apache maven plugin Shade
https://maven.apache.org/plugins/
https://maven.apache.org/plugins/maven-shade-plugin/usage.html --> <plugin>




=====================================================


místo switch - metody do mapy

seznam operátorů.. možnost přidat další.. pro menos10metros pro GPS



IntegerConcreteSensor

ArgumentCaptor



ActuatorTest




Rule = new rule

rule.addCondition(new Condition(thresholeForCondition_0, ico_0, ics_0))
rule.addCondition(new Condition(thresholeForCondition_1, ico_1, ics_1))

rule.addAction(new Action)



RuleTest
whenExecuteRuleIfAllConditionAreEvaluatedAndAreTrueThenAllActionsArePowered(){
	integerConcreteSensor ics_0 = mock
	doReturn(7).when()



//exec
rule.execute()

//verif

verify(ics_0, times(1)).getValue();

assertTrue(((Integer)thresholdCapture_0.getValue()).intValue() == threslhold;


}

=====================================================

# V pom.xml

	- groupId
	- artefactId
	- version

Na upload našeho kódu využijeme jednu z fází mavenu (install).

Nový projekt MyLogAPi. Na nacvičení designování API.

mvn install nám nainstalluje appku do C:/User/<username>/.m2. Potom stačí v
novým projektu použít ty samý vlastnosti (groupId, artefactId a version) a maven
projekt sám identifikuje a vyplní nám pom.xml. (kouká se právě do .m2 kde najde
projekt a všechny jeho verze).


=======================================================

# Plugin

## Vytvoření pluginu

V pom.xml tag <packaging>maven-plugin</packaging>.
Využijeme maven libraries, se kterými můžeme vytvářet pluginy:
	- maven-plugin-api
	- maven-plugin-annotations

Třídu, která implementuje plugin oanotujeme s jménem pluginu.
Třída, která implementuje plugin dědí od AbstractMojo -> jedinná metoda je
execute.
Můžeme si zvolit nějaký parametry, který nám pak předá maven. Tyto parametry
musí být oanotovány s jménem parametru(==jméno fieldu) a defaultní hodnotou.

## Použití pluginu

V pom.xml:

```
		<build>
			<plugins>
				<plugin>
					<groupId>....</..>
					<artifactId>....</..>
					<version>...</..>
					<configuration>
						<jmenoParametru> hodnotaProParametr </jmenoParametru>
					</configuration>
					<executions>
						<execution>
							<phase>compile</..>
							<goals>
								<goal>sayHello</..>
					</......>
		</....>
```


Pak jen v cmd:

		mvn JmenoPluginu:JmenoGoalu

<<<<<<< HEAD


=====================================================

# Rychlé opakování

## Code smell

https://cv-aep.ulpgc.es/cv/ulpgctp20/pluginfile.php/135131/mod_resource/content/1/T6.%20Code%20Smells.pdf

<neúplné info z hodiny>

- Duplikace kódu
	- Jak vzniká?

Chceme stejnou funkčnost ale architektura nám neumožňuje použít přesně ten smaý kód => musíme kopírovat.

	- Proč potřebuje refaktorizaci?

Dvě místa, kde opravovat chyby...

- Mrtvý kód

Kód, který není nikdy spuštěný.

	- Jak vzniká?

?

- "Líná" třída

Třída, která má málo funkcionality.

- Co znamená perfektně okomentovaný?

Nic. Špatná otázka..

- codigo sobrante?

- Dlouhé metody, třídy

- Proxy

- Posedlost primitivními typy

</neúplné info z hodiny>


# Test integrace

V jakém životním cyklu mavenu běží? -> verify (né s unit testy)

Plugin hledá testovací třídy, které obsahují string "IT" ve jménu třídy.

Dále metody můžou být anotované s @Category. -> je nutná konfigurace pluginu. (dolores)

# Deploy

(dolores)

=====================================================

test v lednu:

codewars - praktický, znalost TDD, git a maven
legacy code --> refactorization
vlastní repozitář ten den při testu



task - facturas (gaps, overlaps, pending until today)
indentificar SUT
indentificar tests

identificar errores - gaps, overlaps



Big data, data management, deta gobernar
MDM - master data management



SUT - subject under test
just one class

mock - día de hoy (cont take system time - hoy would be every time)

